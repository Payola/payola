package cz.payola.model

import cz.payola.data.entities.User
import cz.payola.domain.rdf.Graph
import cz.payola.data.dao._

class DataFacade
{
    val userDAO = new UserDAO
    val analysisDAO = new AnalysisDAO

<<<<<<< HEAD
    def getGraph(uri: String): Graph = {
        val dbPediaEndpointUrl = "http://dbpedia.org/sparql" +
            "?default-graph-uri=http%3A%2F%2Fdbpedia.org" +
            "&format=application%2Frdf%2Bxml" +
            "&save=display"
        val configurations = List(new SparqlEndpointConfiguration(dbPediaEndpointUrl))

        /*val query = """ //multicomponent graph query
            CONSTRUCT {
                ?x <http://dbpedia.org/ontology/populationDensity> ?p0 .
                ?x <http://dbpedia.org/ontology/populationMetro> ?p1 .
                ?x <http://dbpedia.org/ontology/populationTotal> ?p3 .
                ?x <http://dbpedia.org/ontology/populationUrban> ?p4 . }
            WHERE {
                ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/City> .
                ?x <http://dbpedia.org/ontology/populationDensity> ?p0 .
                ?x <http://dbpedia.org/ontology/populationMetro> ?p1 .
                ?x <http://dbpedia.org/ontology/populationTotal> ?p3 .
                ?x <http://dbpedia.org/ontology/populationUrban> ?p4 .
                FILTER (?p4 > 2000000) .}""".format(uri,uri)*/

        val query = """
            CONSTRUCT {
                <%s> ?p1 ?n1 .
                ?n1 ?p2 ?n2 .
            }
            WHERE {
                <%s> ?p1 ?n1 .
                OPTIONAL { ?n1 ?p2 ?n2 }
            }
            LIMIT 40
        """.format(uri, uri)

        QueryExecutor.executeQuery(configurations, query).data.headOption.map(rdf => RDFGraph(rdf)).get
    }

=======
>>>>>>> develop
    def getUserByCredentials(username: String, password: String) : Option[User] = {
        userDAO.getUserByCredentials(username, cryptPassword(password))
    }

    def getUserByUsername(username: String) : Option[User] = {
        userDAO.getUserByUsername(username)
    }

    def register(username: String, password: String) {
        val u = new User(username, cryptPassword(password), username)

        userDAO.persist(u)
    }

    def getAnalysisById(id: String) = {
        analysisDAO.getById(id)
    }

    def topAnalyses = {
        analysisDAO.getTopAnalyses()
    }

    def getPublicAnalysesByOwner(o: User) = {
        analysisDAO.getTopAnalysesByUser(o.id)
    }

    def getGraph(uri: String) : Graph = {
        null
    }

    //TODO bcrypt
    private def cryptPassword(password: String, method: String = "SHA-1") : String = {
        val md = java.security.MessageDigest.getInstance(method)
        val digest = md.digest(password.toCharArray.map(_.toByte))
        new String(digest.map(_.toChar))
    }
}
